#!/bin/bash 

readonly APP_VERSION=0.1

readonly DEFAULT_TRASHBIN_PATH="$HOME/.trashed"
readonly PREF_FILENAME=".vimrc"
readonly PREF_FILEPATH="$HOME/$PREF_FILENAME"


trashbin_path=DEFAULT_TRASHBIN_PATH  # default value set
itemcount=0
totalsz=0

load_prefs() {
    echo "  # load_prefs called"  # DEBUG
    if [ -e "$PREF_FILEPATH" ]; then 
        while IFS= read -r line
        do
            key=$(echo "$line" | cut -d= -f1)
            val=$(echo "$line" | cut -d= -f2)
            case "$key" in 
                TRASHBIN_PATH)
                    if [ -z "$val" ]; then
                        echo "Error: Empty value for key: $key in preference file $PREF_FILEPATH" >>/dev/stderr
                        exit 2
                    elif [ ! -e "$val" ]; then
                        option=
                        if [ $verbose ]; then 
                            option="--verbose"
                            echo "Trash bin directory $val not present. Creating..."
                        fi
                        mkdir $option "$val"
                        [ $? -ne 0 ] && exit 2
                    fi
                    trashbin_path=$val
                    echo "  # trashbin_path=$trashbin_path"  # DEBUG
                    ;;

                *) 
                    echo "Err: Invalid key in $PREF_FILEPATH: $key" >>/dev/stderr
                    exit 2
        done < "$PREF_FILEPATH"
    else
        if [ ! -f "$PREF_FILEPATH" ]; then 
            echo "Preference file $PREF_FILEPATH exists but is not a file. Manualy delete this entry." >>/dev/stderr
            exit 2
        fi 
        [ $verbose ] && echo "Creating preference file: $PREF_FILEPATH..."
        echo "TRASHBIN_PATH=$DEFAULT_TRASHBIN_PATH" > $PREF_FILEPATH
    fi
}

fetch_trash_info() {
    echo "  # fetch_trash_info called"  # DEBUG
    for file in $(find $trashbin_path)
    do 
        echo "  # file=$file"  # DEBUG
        itemcount=$(($itemcount+1))
        [ -f "$file" ] && totalsz=$(($totalsz+$(stat -c%s "$file")))
    done
}

# show_log() {
#     echo "  # show_log called" # DEBUG 
#     # echo "Contents\:"
#     while IFS= read -r line
#     do
#         echo "  $line"
#     done < "$LOG_FILE"
# }

restore_last() {
    echo "  # restore_last called"  # DEBUG
    lastdir=$(ls -t | head -1)
    echo "  # lastdir=$lastdir"
    if [ -z $lastdir ]; then 
        echo "Err: Nothing to restore. Trash bin empty!" >>/dev/stderr
        exit 1
    fi
    [ $verbose ] && echo "Restoring..."
    option=$([ $verbose ] && printf -- "--verbose")
    echo mv $option -r "$lastdir" "$PWD"  # DEBUG 
    [ $verbose ] && echo "Restored files placed inside: $lastdir"

    # last_line=$(tail -1 "$LOG_FILE")
    # dir_name=$(cut -d: -f1 $last_line)
    # restore_loc=$(cut -d: -f1 $last_line)
    # [ $verbose -eq 1 ] && echo "Restoring files at $restore_loc..."
    # echo "  # dir_name=$dir_name, restore_loc=$restore_loc"
    # option=$([ $verbose -eq 1 ] && printf -- "--verbose")
    # echo mv $option -r "$dir_name" "$restore_loc" # DEBUG
    # echo rmdir $option "$dir_name" # DEBUG
}

flush_data() {
    echo "  # flush_data called"  # DEBUG
    option=
    if [ $verbose ]; then
        option="--verbose"
        echo "Flushing..."
    fi 
    echo rm $option -rf "$trashbin_path/*"  # DEBUG
}

dotrash() {
    echo "  # dotrash called"  # DEBUG
    trashdir="$trashbin_path/$(date +'%s')"
    mkdir "$trashdir"
    for file in ${srclist[@]}
    do 
        echo mv $option "$file" "$trashdir"  # DEBUG
        itemcount=$(($itemcount+1))
        [ -f "$file" ] && totalsz=$(($totalsz+$(stat -c%s "$file")))
    done
    [ $verbose ] && echo "Trashed: $itemcount item(s), $totalsz bytes"
}

show_usage() {
    echo Usage\: $0 \[-option1 \[-option2...\]\] \<path1\> \[\<path2\>...\]
}

show_help() {
    echo "Trash utility script"
    echo "Version: $APP_VERSION"
    echo "Synopsis:"
    echo "    A utility to recycle files rather than to delete them permanently from the disk."
    show_usage
    
    echo "Features:"
    echo "    - Option to show verbose lines i.e. the operation steps."
    echo "    - Option to show the files count and total data size stored in trash bin."
    echo "    - Option to flush the trash bin i.e. to delete all trashed data permanently."
    echo "    - Option to restore recently deleted set of files."
    echo "    - Can be customizable on a per-user basis."
    
    echo "Options:"
    echo "    -v, --verbose  Enables verbose mode."
    echo "    -i, --info     Shows the item count and data size stored in trash bin."
    echo "    -f, --flush    Permanently deletes all files in trash bin."
    echo "    -r, --restore  Restores last deleted items."
    echo "    -h, --help     Shows this help menu." 
}

verbose=
srclist=()
filelen=0

main() {
    for arg in "$@"
    do
        case "$arg" in 
            -v | --verbose)
                verbose=ON
                ;;

            -r | --restore)
                restore_last
                exit 0
                ;;

            -f | --flush)            
                fetch_trash_info
                echo "  # itemcount=$itemcount"  # DEBUG
                if [ $itemcount -eq 0 ]; then 
                    echo "Trash bin is empty!" >>/dev/stderr
                else
                    read -p "Permanently delete $itemcount item(s), $totalsz bytes of data? [Y for 'Yes']  " res
                    echo "  # res='$res'"  # DEBUG
                    if [ -n $res ] && [ "$res" == "Y" ]; then 
                        flush_data
                    fi
                fi
                exit 0;

            -i | --info)
                fetch_trash_info
                [ itemcount -eq 0 ] && echo "Trash bin is empty." || echo "Trash bin contains $itemcount item(s) with total of $totalsz bytes of data."
                exit 0
                ;;
                
            -h | --help) 
                show_help 
                exit 0
                ;;

            *) 
                srclist[$filelen]=$arg
                printf "  # arg=%s, srclist[%d]=%s\n" "$arg" $filelen "${srclist[$filelen]}"  # DEBUG 
                filelen=$(($filelen+1)) 
                ;;
        esac 
    done

    if [ $filelen -gt 0 ]; then 
        dotrash
    else 
        show_usage
        exit 1
    fi
}


# start the program
main