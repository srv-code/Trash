#!/bin/bash 

readonly APP_VERSION=1.0

readonly DEFAULT_TRASHBIN_PATH="$HOME/.trashed"
readonly PREF_FILENAME=".trashrc"
readonly PREF_FILEPATH="$HOME/$PREF_FILENAME"

trashbin_path=$DEFAULT_TRASHBIN_PATH  # default value set
itemcount=0
totalsz=0
verbose=
srclist=()


load_prefs() {
    # echo "  # invoked load_prefs()"  # DEBUG
    if [ -e "$PREF_FILEPATH" ]; then 
        if [ ! -f "$PREF_FILEPATH" ]; then 
            echo "Err: Preference file $PREF_FILEPATH exists but is not a file. Manually delete this entry." >>/dev/stderr
            exit 2
        fi

        while IFS= read -r line
        do
            key=$(echo "$line" | cut -d= -f1)
            val=$(echo "$line" | cut -d= -f2)
            case "$key" in 
                TRASHBIN_PATH)
                    if [ -z "$val" ]; then
                        echo "Parse err: Empty value for key: $key in preference file $PREF_FILEPATH" >>/dev/stderr
                        exit 2
                    elif [ ! -e "$val" ]; then
                        [ $verbose ] && echo "Creating trash bin directory $val..."
                        mkdir $([ $verbose ] && echo "--verbose") "$val"
                        [ $? -ne 0 ] && exit 2
                    fi
                    trashbin_path=$val
                    # echo "  # trashbin_path=$trashbin_path"  # DEBUG
                    ;;

                *) 
                    echo "Parse err: Invalid key in $PREF_FILEPATH: $key" >>/dev/stderr
                    exit 2
            esac 
        done < "$PREF_FILEPATH"
    else
        [ $verbose ] && echo "Creating preference file: $PREF_FILEPATH..."
        echo "TRASHBIN_PATH=$DEFAULT_TRASHBIN_PATH" > $PREF_FILEPATH

        [ $verbose ] && echo "Creating default trash bin directory..."        
        mkdir $([ $verbose ] && echo "--verbose") $DEFAULT_TRASHBIN_PATH
    fi
}

fetch_trash_info() {
    # echo "  # invoked fetch_trash_info()"  # DEBUG
    itemcount=-1
    for file in $(find $trashbin_path)
    do 
        # echo "  # file=$file"  # DEBUG
        itemcount=$(($itemcount+1))
        [ -f "$file" ] && totalsz=$(($totalsz+$(stat -c%s "$file")))
    done
}

restore_last() {
    # echo "  # invoked restore_last()"  # DEBUG
    lastdir=$(ls -t "$trashbin_path" | head -1)
    # echo "  # lastdir=$lastdir"
    if [ -z $lastdir ]; then 
        echo "Err: Nothing to restore. Trash bin is empty!" >>/dev/stderr
        exit 1
    fi
    [ $verbose ] && echo "Restoring..."
    mv $([ $verbose ] && echo "--verbose") "$trashbin_path/$lastdir" "$PWD"
    echo "Restored files placed inside: $lastdir"
}

flush_data() {
    # echo "  # invoked flush_data()"  # DEBUG
    [ $verbose ] && echo "Flushing..."
    rm $([ $verbose ] && echo "--verbose") -rf "$trashbin_path"
    [ $? -ne 0 ] && exit 2
    mkdir $([ $verbose ] && echo "--verbose") "$trashbin_path"
    [ $? -ne 0 ] && exit 2
    [ $verbose ] && echo "Done."
}

trash() {
    # echo "  # invoked trash()"  # DEBUG
    trashdir="$trashbin_path"/$(date +'%s')
    mkdir "$trashdir"
    [ $? -ne 0 ] && exit 2
    for file in ${srclist[@]}
    do 
        mv  "$file" "$trashdir"
        itemcount=$(($itemcount+1))
        [ -f "$file" ] && totalsz=$(($totalsz+$(stat -c%s "$file")))
    done
    [ $verbose ] && echo "Trashed: $itemcount item(s), $totalsz bytes"
}

show_usage() {
    echo "Usage: $0 [-option1 [-option2...]] [<path1> [<path2>...]] (no path argument means all contents of pwd)"
}

show_help() {
    echo "Trash utility script"
    echo "Version: $APP_VERSION"
    echo "Synopsis:"
    echo "    A utility to recycle files rather than to delete them permanently from the disk."
    show_usage
    
    echo "Features:"
    echo "    - Option to show verbose lines i.e. major operation steps."
    echo "    - Option to show the files count and total data size stored in trash bin."
    echo "    - Option to flush the trash bin i.e. to delete all trashed data permanently."
    echo "    - Option to restore recently deleted set of files."
    echo "    - Can be customizable on a per-user basis."
    
    echo "Options:"
    echo "    -v, --verbose  Enables verbose mode."
    echo "    -i, --info     Shows the item count and data size stored in trash bin."
    echo "    -f, --flush    Permanently deletes all files in trash bin."
    echo "    -r, --restore  Restores last deleted items."
    echo "    -h, --help     Shows this help menu." 

    echo "Exit codes:"
    echo "    Normal exit    0"
    echo "    User errors    1"
    echo "    Other errors   2"
}

filelen=0

# switches
do_trash=ON  # since default behavior
do_restore=
do_flush=
show_info=

parse_cmdline() {
    # echo "  # inside parse_cmdline"  # DEBUG
    # echo "  # args=[$@]"  # DEBUG
    for arg in "$@"
    do
        # echo "  # parsed arg=$arg"  # DEBUG
        case "$arg" in 
            -v | --verbose)
                verbose=ON
                ;;

            -r | --restore)
                do_trash=
                do_restore=ON
                ;;

            -f | --flush)
                do_trash=
                do_flush=ON
                ;;

            -i | --info)
                do_trash=
                show_info=ON
                ;;
                
            -h | --help)
                show_help
                exit 0
                ;;

            *)
                srclist[$filelen]=$arg
                printf "  # srcfile=%s, srclist[%d]=%s\n" "$arg" $filelen "${srclist[$filelen]}"  # DEBUG 
                filelen=$(($filelen+1)) 
                ;;
        esac 
    done
}

main() {
    # echo "  # inside main"  # DEBUG

    parse_cmdline "$@"

    # perform action
    load_prefs

    if [ $do_restore ]; then
        restore_last
    elif [ $do_flush ]; then 
        fetch_trash_info
        # echo "  # itemcount=$itemcount"  # DEBUG
        if [ $itemcount -eq 0 ]; then 
            echo "Trash bin is empty!" >>/dev/stderr
        else
            read -p "Permanently delete $itemcount item(s), $totalsz bytes of data? [Y for 'Yes']  " res
            # echo "  # res='$res'"  # DEBUG
            if [ -n $res ] && [ "$res" == "Y" ]; then 
                flush_data
            else 
                echo 'Operation aborted.'
            fi
        fi
    elif [ $show_info ]; then
        fetch_trash_info
        [ $itemcount -eq 0 ] && echo "Trash bin is empty." || echo "Trash bin contains $itemcount item(s) with total of $totalsz bytes of data."
    elif [ $do_trash ]; then
        if [ $filelen -eq 0 ]; then
            for file in $(ls -A)
            do 
                # echo "  # adding file=$file"  # DEBUG
                srclist[$filelen]=$file
                filelen=$(($filelen+1))
            done
        fi
        trash
    fi
    exit 0
}


# start the program
main "$@"